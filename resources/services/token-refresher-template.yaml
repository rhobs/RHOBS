apiVersion: v1
kind: Template
metadata:
  name: token-refresher
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: telemeter-token-refresher
      app.kubernetes.io/name: token-refresher
      app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
    name: telemeter-token-refresher
  spec:
    selector:
      matchLabels:
        app.kubernetes.io/instance: telemeter-token-refresher
        app.kubernetes.io/name: token-refresher
        app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: telemeter-token-refresher
          app.kubernetes.io/name: token-refresher
          app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --log.level=info
          - --log.format=logfmt
          - --web.listen=0.0.0.0:8080
          - --web.internal.listen=0.0.0.0:8081
          - --oidc.audience=$(OIDC_AUDIENCE)
          - --oidc.client-id=$(OIDC_CLIENT_ID)
          - --oidc.client-secret=$(OIDC_CLIENT_SECRET)
          - --oidc.issuer-url=$(OIDC_ISSUER_URL)
          - --url=http://observatorium-observatorium-api.${NAMESPACE}.svc:8080
          env:
          - name: OIDC_AUDIENCE
            valueFrom:
              secretKeyRef:
                key: audience
                name: ${TOKEN_REFRESHER_SECRET_NAME}
          - name: OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: clientID
                name: ${TOKEN_REFRESHER_SECRET_NAME}
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: clientSecret
                name: ${TOKEN_REFRESHER_SECRET_NAME}
          - name: OIDC_ISSUER_URL
            valueFrom:
              secretKeyRef:
                key: issuerURL
                name: ${TOKEN_REFRESHER_SECRET_NAME}
          image: quay.io/observatorium/token-refresher:${TOKEN_REFRESHER_IMAGE_TAG}
          name: token-refresher
          ports:
          - containerPort: 8081
            name: internal
          - containerPort: 8080
            name: web
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:8080
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: token-refresher-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: token-refresher-proxy
            readOnly: false
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - name: token-refresher-tls
          secret:
            secretName: token-refresher-tls
        - name: token-refresher-proxy
          secret:
            secretName: token-refresher-proxy
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/instance: telemeter-token-refresher
      app.kubernetes.io/name: token-refresher
      app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
    name: token-refresher-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: token-refresher-tls
    labels:
      app.kubernetes.io/instance: telemeter-token-refresher
      app.kubernetes.io/name: token-refresher
      app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
    name: telemeter-token-refresher
  spec:
    ports:
    - name: internal
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 8443
      targetPort: 8443
    selector:
      app.kubernetes.io/instance: telemeter-token-refresher
      app.kubernetes.io/name: token-refresher
      app.kubernetes.io/version: ${TOKEN_REFRESHER_IMAGE_TAG}
    type: ClusterIP
parameters:
- name: NAMESPACE
  value: telemeter
- name: OAUTH_PROXY_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_PROXY_IMAGE_TAG
  value: 4.7.0
- name: OAUTH_PROXY_CPU_REQUEST
  value: 100m
- name: OAUTH_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: OAUTH_PROXY_CPU_LIMITS
  value: 200m
- name: OAUTH_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: SERVICE_ACCOUNT_NAME
  value: prometheus-telemeter
- name: TOKEN_REFRESHER_IMAGE_TAG
  value: master-2021-03-05-b34376b
- name: TOKEN_REFRESHER_SECRET_NAME
  value: token-refrsher-oidc

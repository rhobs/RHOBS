apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: observatorium-traces
objects:
- apiVersion: logging.openshift.io/v1
  kind: Elasticsearch
  metadata:
    annotations:
      logging.openshift.io/elasticsearch-cert-management: "true"
      logging.openshift.io/elasticsearch-cert.curator-${ELASTICSEARCH_NAME}: system.logging.curator
      logging.openshift.io/elasticsearch-cert.jaeger-${ELASTICSEARCH_NAME}: user.jaeger
    name: ${ELASTICSEARCH_NAME}
    namespace: ${NAMESPACE}
  spec:
    managementState: Managed
    nodeSpec:
      resources:
        limits:
          memory: ${ELASTICSEARCH_MEMORY}
        requests:
          cpu: ${ELASTICSEARCH_REQUEST_CPU}
          memory: ${ELASTICSEARCH_MEMORY}
    nodes:
    - nodeCount: ${{ELASTICSEARCH_NODE_COUNT}}
      proxyResources: {}
      resources: {}
      roles:
      - master
      - client
      - data
      storage: {}
    redundancyPolicy: ${ELASTICSEARCH_REDUNDANCY_POLICY}
- apiVersion: jaegertracing.io/v1
  kind: Jaeger
  metadata:
    labels:
      app.kubernetes.io/component: rhobs
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-jaeger-rhobs
    namespace: ${NAMESPACE}
  spec:
    storage:
      elasticsearch:
        doNotProvision: true
        name: ${ELASTICSEARCH_NAME}
        useCertManagement: true
      options:
        es:
          index-prefix: rhobs
      type: elasticsearch
    strategy: production
- apiVersion: jaegertracing.io/v1
  kind: Jaeger
  metadata:
    labels:
      app.kubernetes.io/component: telemeter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-jaeger-telemeter
    namespace: ${NAMESPACE}
  spec:
    storage:
      elasticsearch:
        doNotProvision: true
        name: ${ELASTICSEARCH_NAME}
        useCertManagement: true
      options:
        es:
          index-prefix: telemeter
      type: elasticsearch
    strategy: production
- apiVersion: opentelemetry.io/v1alpha1
  kind: OpenTelemetryCollector
  metadata:
    labels:
      app.kubernetes.io/component: jaeger
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-otel
    namespace: ${NAMESPACE}
  spec:
    config: |-
      exporters:
        jaeger/rhobs:
          endpoint: "observatorium-jaeger-rhobs-collector-headless.${NAMESPACE}.svc.cluster.local:14250"
          tls:
            ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
            insecure: false
        jaeger/telemeter:
          endpoint: "observatorium-jaeger-telemeter-collector-headless.${NAMESPACE}.svc.cluster.local:14250"
          tls:
            ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
            insecure: false
      processors:
        routing:
          from_attribute: "X-Tenant"
          table:
          - exporters:
            - "jaeger/rhobs"
            value: "rhobs"
          - exporters:
            - "jaeger/telemeter"
            value: "telemeter"
      receivers:
        otlp:
          protocols:
            grpc: {}
      service:
        pipelines:
          traces:
            exporters:
            - "jaeger/rhobs"
            - "jaeger/telemeter"
            processors:
            - "routing"
            receivers:
            - "otlp"
        telemetry:
          metrics:
            level: "basic"
    image: ${OPENTELEMETRY_COLLECTOR_IMAGE}:${OPENTELEMETRY_COLLECTOR_IMAGE_TAG}
    mode: deployment
parameters:
- name: NAMESPACE
  value: observatorium-traces
- name: OPENTELEMETRY_COLLECTOR_IMAGE
  value: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
- name: OPENTELEMETRY_COLLECTOR_IMAGE_TAG
  value: 0.46.0
- name: ELASTICSEARCH_MEMORY
  value: 4Gi
- name: ELASTICSEARCH_REQUEST_CPU
  value: 200m
- name: ELASTICSEARCH_NAME
  value: shared-es
- name: ELASTICSEARCH_NODE_COUNT
  value: "1"
- name: ELASTICSEARCH_REDUNDANCY_POLICY
  value: ZeroRedundancy

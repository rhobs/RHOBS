apiVersion: v1
kind: Template
metadata:
  name: jaeger
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-collector
    name: jaeger-admin
  spec:
    ports:
    - name: admin
      port: 14269
      targetPort: 14269
    selector:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: jaeger-collector
      app.kubernetes.io/name: jaeger-collector
      app.kubernetes.io/version: ${IMAGE_TAG}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-agent
    name: jaeger-agent-discovery
  spec:
    ports:
    - name: metrics
      port: 14271
      targetPort: 14271
    selector:
      app.kubernetes.io/tracing: jaeger-agent
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: jaeger-collector
      app.kubernetes.io/name: jaeger-collector
      app.kubernetes.io/version: ${IMAGE_TAG}
    name: jaeger-collector
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: tracing
        app.kubernetes.io/instance: jaeger-collector
        app.kubernetes.io/name: jaeger-collector
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: tracing
          app.kubernetes.io/instance: jaeger-collector
          app.kubernetes.io/name: jaeger-collector
          app.kubernetes.io/version: ${IMAGE_TAG}
      spec:
        containers:
        - args:
          - --collector.queue-size=4000
          - --memory.max-traces=${JAEGER_MAX_TRACES}
          env:
          - name: SPAN_STORAGE_TYPE
            value: memory
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            periodSeconds: 30
          name: jaeger-collector
          ports:
          - containerPort: 14269
            name: admin
          - containerPort: 14250
            name: grpc
          - containerPort: 14271
            name: metrics
          - containerPort: 16686
            name: query
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
            limits:
              cpu: ${JAEGER_CPU_LIMITS}
              memory: ${JAEGER_MEMORY_LIMITS}
            requests:
              cpu: ${JAEGER_CPU_REQUEST}
              memory: ${JAEGER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /var/jaeger/store
            name: jaeger-store-data
            readOnly: false
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:16686
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: jaeger-query-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: jaeger-proxy
            readOnly: false
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - name: jaeger-store-data
          persistentVolumeClaim:
            claimName: jaeger-store-data
        - name: jaeger-query-tls
          secret:
            secretName: jaeger-query-tls
        - name: jaeger-proxy
          secret:
            secretName: jaeger-proxy
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-collector
    name: jaeger-collector-headless
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 14250
      targetPort: 14250
    selector:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: jaeger-collector
      app.kubernetes.io/name: jaeger-collector
      app.kubernetes.io/version: ${IMAGE_TAG}
- apiVersion: monitoring.coreos.com/v1
  kind: PrometheusRule
  metadata:
    labels:
      prometheus: app-sre
      role: alert-rules
    name: observatorium-jaeger
  spec:
    groups:
    - name: jaeger_alerts
      rules:
      - alert: JaegerHTTPServerErrs
        annotations:
          message: |
            {{ $labels.job }} {{ $labels.instance }} is experiencing {{ printf "%.2f" $value }}% HTTP errors.
        expr: 100 * sum(rate(jaeger_agent_http_server_errors_total[1m])) by (instance, job, namespace) / sum(rate(jaeger_agent_http_server_total[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerRPCRequestsErrors
        annotations:
          message: |
            {{ $labels.job }} {{ $labels.instance }} is experiencing {{ printf "%.2f" $value }}% RPC HTTP errors.
        expr: 100 * sum(rate(jaeger_client_jaeger_rpc_http_requests{status_code=~"4xx|5xx"}[1m])) by (instance, job, namespace) / sum(rate(jaeger_client_jaeger_rpc_http_requests[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerClientSpansDropped
        annotations:
          message: |
            service {{ $labels.job }} {{ $labels.instance }} is dropping {{ printf "%.2f" $value }}% spans.
        expr: 100 * sum(rate(jaeger_reporter_spans{result=~"dropped|err"}[1m])) by (instance, job, namespace) / sum(rate(jaeger_reporter_spans[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerAgentSpansDropped
        annotations:
          message: |
            agent {{ $labels.job }} {{ $labels.instance }} is dropping {{ printf "%.2f" $value }}% spans.
        expr: 100 * sum(rate(jaeger_agent_reporter_batches_failures_total[1m])) by (instance, job, namespace) / sum(rate(jaeger_agent_reporter_batches_submitted_total[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerCollectorDroppingSpans
        annotations:
          message: |
            collector {{ $labels.job }} {{ $labels.instance }} is dropping {{ printf "%.2f" $value }}% spans.
        expr: 100 * sum(rate(jaeger_collector_spans_dropped_total[1m])) by (instance, job, namespace) / sum(rate(jaeger_collector_spans_received_total[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerSamplingUpdateFailing
        annotations:
          message: |
            {{ $labels.job }} {{ $labels.instance }} is failing {{ printf "%.2f" $value }}% in updating sampling policies.
        expr: 100 * sum(rate(jaeger_sampler_queries{result="err"}[1m])) by (instance, job, namespace) / sum(rate(jaeger_sampler_queries[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerThrottlingUpdateFailing
        annotations:
          message: |
            {{ $labels.job }} {{ $labels.instance }} is failing {{ printf "%.2f" $value }}% in updating throttling policies.
        expr: 100 * sum(rate(jaeger_throttler_updates{result="err"}[1m])) by (instance, job, namespace) / sum(rate(jaeger_throttler_updates[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
      - alert: JaegerQueryReqsFailing
        annotations:
          message: |
            {{ $labels.job }} {{ $labels.instance }} is seeing {{ printf "%.2f" $value }}% query errors on {{ $labels.operation }}.
        expr: 100 * sum(rate(jaeger_query_requests_total{result="err"}[1m])) by (instance, job, namespace) / sum(rate(jaeger_query_requests_total[1m])) by (instance, job, namespace)> 1
        for: 15m
        labels:
          severity: warning
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/part-of: observatorium
    name: jaeger-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: jaeger-query-tls
    labels:
      app.kubernetes.io/name: jaeger-collector
    name: jaeger-query
  spec:
    ports:
    - name: query
      port: 16686
      targetPort: 16686
    - name: https
      port: 8443
      targetPort: 8443
    selector:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: jaeger-collector
      app.kubernetes.io/name: jaeger-collector
      app.kubernetes.io/version: ${IMAGE_TAG}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: tracing
      app.kubernetes.io/instance: jaeger-collector
      app.kubernetes.io/name: jaeger-collector
      prometheus: app-sre
    name: jaeger-collector
  spec:
    endpoints:
    - port: admin
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: tracing
        app.kubernetes.io/instance: jaeger-collector
        app.kubernetes.io/name: jaeger-collector
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-jaeger-agent
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/name: jaeger-agent
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app.kubernetes.io/name: jaeger-collector
    name: jaeger-store-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Gi
    storageClassName: gp2
parameters:
- name: NAMESPACE
  value: observatorium
- name: IMAGE
  value: jaegertracing/all-in-one
- name: IMAGE_TAG
  value: 1.14.0
- name: REPLICAS
  value: "1"
- name: JAEGER_MAX_TRACES
  value: "100000"
- name: JAEGER_CPU_REQUEST
  value: "1"
- name: JAEGER_MEMORY_REQUEST
  value: 4Gi
- name: JAEGER_CPU_LIMITS
  value: "4"
- name: JAEGER_MEMORY_LIMITS
  value: 8Gi
- name: OAUTH_PROXY_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_PROXY_IMAGE_TAG
  value: 4.7.0
- name: OAUTH_PROXY_CPU_REQUEST
  value: 100m
- name: OAUTH_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: OAUTH_PROXY_CPU_LIMITS
  value: 200m
- name: OAUTH_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: SERVICE_ACCOUNT_NAME
  value: prometheus-telemeter

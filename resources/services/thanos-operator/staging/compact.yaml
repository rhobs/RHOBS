apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: thanos-compact
objects:
- apiVersion: monitoring.thanos.io/v1alpha1
  kind: ThanosCompact
  metadata:
    creationTimestamp: null
    name: rhobs
    namespace: rhobs-stage
  spec:
    additionalArgs:
    - |-
      --tracing.config="config":
        "sampler_param": 2
        "sampler_type": "ratelimiting"
        "service_name": "thanos-compact"
      "type": "JAEGER"
    additionalContainers:
    - args:
      - --reporter.grpc.host-port=dns:///otel-trace-writer-collector-headless.observatorium-tools.svc:14250
      - --reporter.type=grpc
      - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      image: registry.redhat.io/rhosdt/jaeger-agent-rhel8:1.57.0-10
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: 14271
          scheme: HTTP
        initialDelaySeconds: 1
      name: jaeger-agent
      ports:
      - containerPort: 5778
        name: configs
      - containerPort: 6831
        name: jaeger-thrift
      - containerPort: 14271
        name: metrics
      readinessProbe:
        httpGet:
          path: /
          port: 14271
          scheme: HTTP
        initialDelaySeconds: 1
      resources:
        limits:
          cpu: 128m
          memory: 128Mi
        requests:
          cpu: 32m
          memory: 64Mi
    - args:
      - -provider=openshift
      - -https-address=:8443
      - -http-address=
      - -email-domain=*
      - -upstream=http://localhost:10902
      - -openshift-service-account=thanos-compact-rhobs
      - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "rhobs-stage",
        "namespace": "rhobs-stage"}'
      - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
        "name": "rhobs-stage", "namespace": "rhobs-stage"}}'
      - -tls-cert=/etc/tls/private/tls.crt
      - -tls-key=/etc/tls/private/tls.key
      - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
      - -cookie-secret=${OAUTH_PROXY_COOKIE_SECRET}
      - -openshift-ca=/etc/pki/tls/cert.pem
      - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.14
      name: oauth-proxy
      ports:
      - containerPort: 8443
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/tls/private
        name: tls
        readOnly: true
    additionalVolumes:
    - name: tls
      secret:
        secretName: compact-tls
    compactConfig:
      compactConcurrency: 1
    debugConfig:
      acceptMalformedIndex: true
      haltOnError: true
      maxCompactionLevel: 3
    downsamplingConfig:
      downsamplingConcurrency: 1
      downsamplingEnabled: false
    featureGates:
      serviceMonitor:
        enable: false
    image: quay.io/thanos/thanos:v0.37.2
    imagePullPolicy: IfNotPresent
    logFormat: logfmt
    logLevel: info
    objectStorageConfig:
      key: thanos.yaml
      name: default-objectstorage
      optional: false
    resourceRequirements:
      limits:
        cpu: "1"
        memory: 5Gi
      requests:
        cpu: 100m
        memory: 1Gi
    retentionConfig:
      fiveMinutes: 365d
      oneHour: 365d
      raw: 365d
    storageSize: 1GiB
  status: {}
- apiVersion: monitoring.thanos.io/v1alpha1
  kind: ThanosCompact
  metadata:
    creationTimestamp: null
    name: telemeter
    namespace: rhobs-stage
  spec:
    additionalArgs:
    - |-
      --tracing.config="config":
        "sampler_param": 2
        "sampler_type": "ratelimiting"
        "service_name": "thanos-compact"
      "type": "JAEGER"
    additionalContainers:
    - args:
      - --reporter.grpc.host-port=dns:///otel-trace-writer-collector-headless.observatorium-tools.svc:14250
      - --reporter.type=grpc
      - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      image: registry.redhat.io/rhosdt/jaeger-agent-rhel8:1.57.0-10
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: 14271
          scheme: HTTP
        initialDelaySeconds: 1
      name: jaeger-agent
      ports:
      - containerPort: 5778
        name: configs
      - containerPort: 6831
        name: jaeger-thrift
      - containerPort: 14271
        name: metrics
      readinessProbe:
        httpGet:
          path: /
          port: 14271
          scheme: HTTP
        initialDelaySeconds: 1
      resources:
        limits:
          cpu: 128m
          memory: 128Mi
        requests:
          cpu: 32m
          memory: 64Mi
    - args:
      - -provider=openshift
      - -https-address=:8443
      - -http-address=
      - -email-domain=*
      - -upstream=http://localhost:10902
      - -openshift-service-account=thanos-compact-telemeter
      - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "rhobs-stage",
        "namespace": "rhobs-stage"}'
      - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
        "name": "rhobs-stage", "namespace": "rhobs-stage"}}'
      - -tls-cert=/etc/tls/private/tls.crt
      - -tls-key=/etc/tls/private/tls.key
      - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
      - -cookie-secret=${OAUTH_PROXY_COOKIE_SECRET}
      - -openshift-ca=/etc/pki/tls/cert.pem
      - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.14
      name: oauth-proxy
      ports:
      - containerPort: 8443
        name: https
        protocol: TCP
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/tls/private
        name: tls
        readOnly: true
    additionalVolumes:
    - name: tls
      secret:
        secretName: compact-tls
    compactConfig:
      compactConcurrency: 1
    debugConfig:
      acceptMalformedIndex: true
      haltOnError: true
      maxCompactionLevel: 3
    downsamplingConfig:
      downsamplingConcurrency: 1
      downsamplingEnabled: false
    featureGates:
      serviceMonitor:
        enable: false
    image: quay.io/thanos/thanos:v0.37.2
    imagePullPolicy: IfNotPresent
    logFormat: logfmt
    logLevel: info
    objectStorageConfig:
      key: thanos.yaml
      name: telemeter-objectstorage
      optional: false
    resourceRequirements:
      limits:
        cpu: "1"
        memory: 5Gi
      requests:
        cpu: 100m
        memory: 1Gi
    retentionConfig:
      fiveMinutes: 365d
      oneHour: 365d
      raw: 365d
    storageSize: 2GiB
  status: {}
